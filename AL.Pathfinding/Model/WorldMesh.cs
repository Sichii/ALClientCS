using System;
using System.Collections.Generic;
using System.Linq;
using AL.Data.Maps;
using AL.Pathfinding.Abstractions;
using AL.Pathfinding.Definitions;
using AL.Pathfinding.Interfaces;
using Chaos.Core.Extensions;
using Common.Logging;

namespace AL.Pathfinding.Model
{
    /// <summary>
    ///     <inheritdoc /> <br />
    ///     Represents a mesh generated by tracing doors/transports of all maps.
    /// </summary>
    /// <seealso cref="GraphBase{TNode,TEdge}" />
    public class WorldMesh : GraphBase<GraphNode<GMap>, GMap>
    {
        private readonly Dictionary<GMap, GraphNode<GMap>> NodeLookup;
        protected sealed override ILog Logger { get; init; }

        /// <summary>
        ///     Initializes a new instance of the <see cref="WorldMesh" /> class.
        /// </summary>
        /// <param name="nodes">A collection of nodes, organized by map.</param>
        public WorldMesh(Dictionary<GMap, GraphNode<GMap>> nodes)
            : base(nodes.Values.ToList(), (_, _) => 1,
                (node, _) => node.Edge.Irregular ? ConnectorType.Leave : ConnectorType.Transport)
        {
            NodeLookup = nodes;
            Logger = LogManager.GetLogger<WorldMesh>();
            Reset();
        }

        /// <summary>
        ///     Finds the shortest route between a start map and any number of end maps.
        /// </summary>
        /// <param name="start">A starting map.</param>
        /// <param name="ends">Any number of end maps. Upon reaching any of the end maps, that path will be returned.</param>
        /// <returns>
        ///     <see cref="IAsyncEnumerable{T}" /> of <see cref="IConnector{TEdge}" /> of <see cref="GMap" /> <br />
        ///     A lazy enumeration of maps along the most optimal path between the start node and the first end node a path is
        ///     found for.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        ///     Unable to locate a start node for the given map. {<paramref name="start" />
        ///     }
        /// </exception>
        /// <exception cref="InvalidOperationException">
        ///     Unable to locate any end nodes for the given maps. {string.Join(',',
        ///     <paramref name="ends" />)}
        /// </exception>
        public IAsyncEnumerable<IConnector<GMap>> FindRoute(GMap start, IEnumerable<GMap> ends)
        {
            if (!NodeLookup.TryGetValue(start, out var startNode))
                throw new InvalidOperationException($"Unable to locate a start node for the given map. ({start.Key})");

            var endMaps = ends.ToArray();
            var endNodes = NodeLookup.TryGetValues(endMaps).ToArray();

            if (endNodes.Length == 0)
                throw new InvalidOperationException(
                    $"Unable to locate any end nodes for the given maps. {string.Join(',', endMaps.Select(map => map.Key))}");

            return Navigate(startNode.Index, endNodes.Select(node => node.Index));
        }
    }
}